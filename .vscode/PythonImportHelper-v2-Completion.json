[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "process",
        "importPath": "rapidfuzz",
        "description": "rapidfuzz",
        "isExtraImport": true,
        "detail": "rapidfuzz",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(f'Path \"{location}\" does not exist!')\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to\n    setup the environment correctly.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.\n    # This can be kept until Python 3.9 or exe installers support is dropped.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "SanjivaniPlacementInfo",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class SanjivaniPlacementInfo(db.Model):\n    __tablename__ = 'sanjivaniplacementinfo'\n    id = db.Column(db.Integer, primary_key=True)\n    student_name = db.Column(db.String(100), nullable=False)\n    batch = db.Column(db.String(20), nullable=False)\n    placement_type = db.Column(db.String(50), nullable=False)\n    name_of_company = db.Column(db.String(100), nullable=False)\n    department = db.Column(db.String(100), nullable=False)\n@app.route(\"/get_history\", methods=[\"GET\"])\ndef get_history():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "configure_gemini_api",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def configure_gemini_api():\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        return genai.GenerativeModel(\n            model_name=\"gemini-1.5-flash\",\n            generation_config={\n                \"temperature\": 0.7,\n                \"top_p\": 0.95,\n                \"top_k\": 40,\n                \"max_output_tokens\": 1000,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fetch_data_from_db",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fetch_data_from_db(query, params=None):\n    \"\"\"Fetch data from the database.\"\"\"\n    try:\n        engine = sqlalchemy.create_engine(DATABASE_URL)\n        with engine.connect() as connection:\n            if params:\n                return pd.read_sql(query, connection, params=params)\n            return pd.read_sql(query, connection)\n    except Exception as e:\n        return f\"Error fetching data from database: {str(e)}\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ask_gemini",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def ask_gemini(prompt):\n    try:\n        chat_session = chat_model.start_chat(history=[])\n        response = chat_session.send_message(prompt)\n        return response.text.strip()\n    except Exception as e:\n        return f\"Error with Gemini API: {str(e)}\"\n# Add to imports\nfrom werkzeug.utils import secure_filename\nimport tempfile",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "find_closest_match",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def find_closest_match(query, options, threshold=50):\n    if not query or not options:\n        return None\n    closest_match = process.extractOne(query, options)\n    if closest_match:\n        match, score = closest_match[:2]\n        return match if score >= threshold else None\n    return None\n# Load intents and preprocess for fallback\nfile_path = os.path.abspath(\"./intents.json\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_intents_for_fallback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_intents_for_fallback(user_query, threshold=85):\n    best_score, best_response = 0, None\n    user_query_lower = user_query.lower()  # Convert user query to lowercase\n    for intent in intents:\n        # Normalize intent patterns to lowercase for matching\n        patterns_lower = [pattern.lower() for pattern in intent.get(\"patterns\", [])]\n        match = process.extractOne(user_query_lower, patterns_lower)\n        if match:\n            matched_pattern, score = match[:2]\n            if score > best_score:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "process_query",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def process_query(user_query):\n    keywords = list(table_mapping.keys())\n    matched_keyword = find_closest_match(user_query.lower(), keywords)  # Convert query to lowercase\n    if matched_keyword:\n        table_name = table_mapping[matched_keyword]\n        query = f\"SELECT * FROM {table_name}\"\n        db_data = fetch_data_from_db(query)\n        if isinstance(db_data, str) and \"Error\" in db_data:\n            return db_data\n        elif db_data.empty:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    if \"chat_history\" not in session:\n        session[\"chat_history\"] = []\n    return render_template(\"bot_entry.html\", chat_history=session[\"chat_history\"])\n@app.route(\"/index\")\ndef index_page():\n    if \"chat_history\" not in session:\n        session[\"chat_history\"] = []\n    return render_template(\"index.html\", chat_history=session[\"chat_history\"])\n@app.route(\"/get_response\", methods=[\"POST\"])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index_page():\n    if \"chat_history\" not in session:\n        session[\"chat_history\"] = []\n    return render_template(\"index.html\", chat_history=session[\"chat_history\"])\n@app.route(\"/get_response\", methods=[\"POST\"])\ndef get_response():\n    user_input = request.json.get(\"user_input\", \"\").strip()\n    if not user_input:\n        return jsonify({\"response\": \"Please enter a valid message.\"})\n    user_input = user_input.lower()  # Normalize the user input to lowercase",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_response",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_response():\n    user_input = request.json.get(\"user_input\", \"\").strip()\n    if not user_input:\n        return jsonify({\"response\": \"Please enter a valid message.\"})\n    user_input = user_input.lower()  # Normalize the user input to lowercase\n    response = process_query(user_input)\n    #admin\n    # Save conversation to session\n    timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    chat_message = {\"user\": user_input, \"bot\": response, \"timestamp\": timestamp}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "show_placements",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def show_placements():\n    page = request.args.get('page', 1, type=int)  # Get the page number from the URL\n    per_page = 10  # Number of records per page\n    placements = SanjivaniPlacementInfo.query.paginate(page=page, per_page=per_page, error_out=False)\n    print(placements)\n    return render_template('admin_panel.html', placements=placements)\n@app.route('/admin', methods=['POST'])\ndef admin_panel_post():\n    \"\"\"Handles POST requests for the Admin Panel\"\"\"\n    form_type = request.form.get('form_type')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "admin_panel_post",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def admin_panel_post():\n    \"\"\"Handles POST requests for the Admin Panel\"\"\"\n    form_type = request.form.get('form_type')\n    if form_type == 'placement':\n        try:\n            query = \"\"\"\n                INSERT INTO sanjivaniplacementinfo\n                (Student_Name, Batch, Placement_Type, Name_Of_Company, department)\n                VALUES (:Student_Name, :Batch, :Placement_Type, :Name_Of_Company, :department)\n            \"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_history",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_history():\n    chat_history = session.get(\"chat_history\", [])\n    return jsonify({\"history\": chat_history})\n@app.route(\"/about\")\ndef about():\n    return render_template(\"about.html\")\n@app.route(\"/history\")\ndef conversation_history():\n    conversation = []\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def about():\n    return render_template(\"about.html\")\n@app.route(\"/history\")\ndef conversation_history():\n    conversation = []\n    try:\n        with open(\"chat_log.csv\", \"r\", encoding=\"utf-8\") as csvfile:\n            csv_reader = csv.reader(csvfile)\n            next(csv_reader)  # Skip the header row\n            for row in csv_reader:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "conversation_history",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def conversation_history():\n    conversation = []\n    try:\n        with open(\"chat_log.csv\", \"r\", encoding=\"utf-8\") as csvfile:\n            csv_reader = csv.reader(csvfile)\n            next(csv_reader)  # Skip the header row\n            for row in csv_reader:\n                conversation.append({\"user\": row[0], \"bot\": row[1], \"timestamp\": row[2]})\n    except FileNotFoundError:\n        conversation = None",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = \"your_secret_key\"  # Replace with your actual secret key\n# Load Gemini API Key securely\nos.environ[\"GEMINI_API_KEY\"] = \"AIzaSyAy0IUrqWfBs6ITZvjU3F8Hq31l-EPqD6o\"  # Replace with your actual API key\ndef configure_gemini_api():\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        return genai.GenerativeModel(\n            model_name=\"gemini-1.5-flash\",\n            generation_config={",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = \"your_secret_key\"  # Replace with your actual secret key\n# Load Gemini API Key securely\nos.environ[\"GEMINI_API_KEY\"] = \"AIzaSyAy0IUrqWfBs6ITZvjU3F8Hq31l-EPqD6o\"  # Replace with your actual API key\ndef configure_gemini_api():\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        return genai.GenerativeModel(\n            model_name=\"gemini-1.5-flash\",\n            generation_config={\n                \"temperature\": 0.7,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ[\"GEMINI_API_KEY\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ[\"GEMINI_API_KEY\"] = \"AIzaSyAy0IUrqWfBs6ITZvjU3F8Hq31l-EPqD6o\"  # Replace with your actual API key\ndef configure_gemini_api():\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        return genai.GenerativeModel(\n            model_name=\"gemini-1.5-flash\",\n            generation_config={\n                \"temperature\": 0.7,\n                \"top_p\": 0.95,\n                \"top_k\": 40,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chat_model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "chat_model = configure_gemini_api()\n# Database configuration\nDATABASE_URL = \"mysql+pymysql://root@localhost:3306/collegedata\"  # Replace with your actual details\ndef fetch_data_from_db(query, params=None):\n    \"\"\"Fetch data from the database.\"\"\"\n    try:\n        engine = sqlalchemy.create_engine(DATABASE_URL)\n        with engine.connect() as connection:\n            if params:\n                return pd.read_sql(query, connection, params=params)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DATABASE_URL = \"mysql+pymysql://root@localhost:3306/collegedata\"  # Replace with your actual details\ndef fetch_data_from_db(query, params=None):\n    \"\"\"Fetch data from the database.\"\"\"\n    try:\n        engine = sqlalchemy.create_engine(DATABASE_URL)\n        with engine.connect() as connection:\n            if params:\n                return pd.read_sql(query, connection, params=params)\n            return pd.read_sql(query, connection)\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "table_mapping",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "table_mapping = {\n    \"placement\": \"sanjivaniplacementinfo\",\n    \"admission\": \"admission_requirements\",\n    \"department\": \"department_details\",\n    \"cutoff\": \"admission_requirements\",\n    \"score\":\"admission_requirements\",\n    \"faculty\": \"department_details\",\n    \"professor\": \"department_details\",\n    \"fees\": \"admission_requirements\",\n    \"intake\":\"admission_requirements\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "file_path = os.path.abspath(\"./intents.json\")\nwith open(file_path, \"r\") as file:\n    intents = json.load(file)\nvectorizer = TfidfVectorizer()\nclf = LogisticRegression(random_state=0, max_iter=10000)\npatterns, tags = [], []\nfor intent in intents:\n    for pattern in intent['patterns']:\n        patterns.append(pattern)\n        tags.append(intent['tag'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vectorizer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "vectorizer = TfidfVectorizer()\nclf = LogisticRegression(random_state=0, max_iter=10000)\npatterns, tags = [], []\nfor intent in intents:\n    for pattern in intent['patterns']:\n        patterns.append(pattern)\n        tags.append(intent['tag'])\nx = vectorizer.fit_transform(patterns)\ny = tags\nclf.fit(x, y)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "clf",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "clf = LogisticRegression(random_state=0, max_iter=10000)\npatterns, tags = [], []\nfor intent in intents:\n    for pattern in intent['patterns']:\n        patterns.append(pattern)\n        tags.append(intent['tag'])\nx = vectorizer.fit_transform(patterns)\ny = tags\nclf.fit(x, y)\n# Generate fallback response",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "x = vectorizer.fit_transform(patterns)\ny = tags\nclf.fit(x, y)\n# Generate fallback response\ndef check_intents_for_fallback(user_query, threshold=85):\n    best_score, best_response = 0, None\n    user_query_lower = user_query.lower()  # Convert user query to lowercase\n    for intent in intents:\n        # Normalize intent patterns to lowercase for matching\n        patterns_lower = [pattern.lower() for pattern in intent.get(\"patterns\", [])]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "y = tags\nclf.fit(x, y)\n# Generate fallback response\ndef check_intents_for_fallback(user_query, threshold=85):\n    best_score, best_response = 0, None\n    user_query_lower = user_query.lower()  # Convert user query to lowercase\n    for intent in intents:\n        # Normalize intent patterns to lowercase for matching\n        patterns_lower = [pattern.lower() for pattern in intent.get(\"patterns\", [])]\n        match = process.extractOne(user_query_lower, patterns_lower)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass SanjivaniPlacementInfo(db.Model):\n    __tablename__ = 'sanjivaniplacementinfo'\n    id = db.Column(db.Integer, primary_key=True)\n    student_name = db.Column(db.String(100), nullable=False)\n    batch = db.Column(db.String(20), nullable=False)\n    placement_type = db.Column(db.String(50), nullable=False)\n    name_of_company = db.Column(db.String(100), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass SanjivaniPlacementInfo(db.Model):\n    __tablename__ = 'sanjivaniplacementinfo'\n    id = db.Column(db.Integer, primary_key=True)\n    student_name = db.Column(db.String(100), nullable=False)\n    batch = db.Column(db.String(20), nullable=False)\n    placement_type = db.Column(db.String(50), nullable=False)\n    name_of_company = db.Column(db.String(100), nullable=False)\n    department = db.Column(db.String(100), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\nclass SanjivaniPlacementInfo(db.Model):\n    __tablename__ = 'sanjivaniplacementinfo'\n    id = db.Column(db.Integer, primary_key=True)\n    student_name = db.Column(db.String(100), nullable=False)\n    batch = db.Column(db.String(20), nullable=False)\n    placement_type = db.Column(db.String(50), nullable=False)\n    name_of_company = db.Column(db.String(100), nullable=False)\n    department = db.Column(db.String(100), nullable=False)\n@app.route(\"/get_history\", methods=[\"GET\"])",
        "detail": "app",
        "documentation": {}
    }
]